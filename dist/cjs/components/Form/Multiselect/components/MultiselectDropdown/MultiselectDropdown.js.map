{"version":3,"sources":["../../../../../../../src/components/Form/Multiselect/components/MultiselectDropdown/MultiselectDropdown.tsx"],"sourcesContent":["import {\n  forwardRef,\n  ForwardRefExoticComponent,\n  Fragment,\n  MouseEvent,\n  RefAttributes,\n  RefObject,\n} from \"react\";\nimport styles from \"./MultiselectDropdown.module.css\";\n\nimport { Cell, CellProps } from \"components/Blocks/Cell/Cell\";\nimport { MultiselectOption } from \"components/Form/Multiselect/types\";\nimport { Popper } from \"components/Overlays/Popper/Popper\";\nimport {\n  isCreateNewOptionPreset,\n  isEmptyOptionPreset,\n} from \"../../hooks/constants\";\nimport { UseMultiselectProps } from \"../../hooks/useMultiselect\";\nimport { renderOptionDefault } from \"./constants\";\n\nexport interface MultiselectDropdownProps\n  extends Required<Pick<UseMultiselectProps, \"options\" | \"value\">> {\n  /** Array of selected options. */\n  value: MultiselectOption[];\n  /** Reference to the target element the dropdown is associated with. */\n  targetRef: RefObject<HTMLElement>;\n  /** Accessibility ID for the dropdown. */\n  dropdownAriaId: string;\n  /** Currently focused option within the dropdown. */\n  focusedOption: MultiselectOption | null;\n  /** Function to register a DOM node with an option index. */\n  setOptionNode: (index: number, node: HTMLElement) => void;\n  /** Function to control the open state of the dropdown. */\n  setOpened: (opened: boolean) => void;\n  /** Index of the currently focused option. */\n  focusedOptionIndex: number | null;\n  /** Function to update the index of the focused option. */\n  setFocusedOptionIndex: (index: number) => void;\n  /** Function to add an option derived from the input value. */\n  addOptionFromInput: () => void;\n  /** Mouse leave event handler for the dropdown. */\n  onMouseLeave: (event: MouseEvent<HTMLDivElement>) => void;\n  /** Function to add a selected option. */\n  addOption: (option: MultiselectOption) => void;\n  /** Function to clear the input value. */\n  clearInput: () => void;\n  /** Custom render function for each option. Defaults to a basic implementation. */\n  renderOption?: ForwardRefExoticComponent<CellProps & RefAttributes<unknown>>;\n  /** Whether to close the dropdown after selecting an option. */\n  closeDropdownAfterSelect?: boolean;\n  /** Optional custom container to render the dropdown into, overrides the default from context */\n  portalContainer?: HTMLElement | null;\n}\n\n/**\n * Renders the dropdown menu for the multiselect input, including all options and managing interactions such as selection, focus, and mouse events.\n * Utilizes the `Popper` component for positioning relative to the input field.\n */\nexport const MultiselectDropdown = forwardRef<\n  HTMLDivElement,\n  MultiselectDropdownProps\n>(\n  (\n    {\n      dropdownAriaId,\n      options,\n      onMouseLeave,\n      targetRef,\n      addOptionFromInput,\n      setFocusedOptionIndex,\n      renderOption = renderOptionDefault,\n      focusedOption,\n      value,\n      setOptionNode,\n      setOpened,\n      closeDropdownAfterSelect,\n      addOption,\n      focusedOptionIndex,\n      clearInput,\n      portalContainer,\n    },\n    ref\n  ) => {\n    return (\n      <Popper\n        id={dropdownAriaId}\n        ref={ref}\n        targetRef={targetRef}\n        onMouseLeave={onMouseLeave}\n        autoUpdateOnTargetResize\n        role=\"listbox\"\n        placement=\"bottom\"\n        sameWidth\n        className={styles.wrapper}\n        portalContainer={portalContainer}\n        ArrowIcon={null}\n        withArrow={false}\n      >\n        {options.map((option, index) => {\n          if (isEmptyOptionPreset(option)) {\n            return (\n              <Cell key=\"empty\" readOnly className={styles.empty}>\n                {option.placeholder}\n              </Cell>\n            );\n          }\n\n          if (isCreateNewOptionPreset(option)) {\n            return (\n              <Cell\n                key=\"new-options\"\n                hovered={focusedOptionIndex === index}\n                onMouseDown={addOptionFromInput}\n                onMouseEnter={() => setFocusedOptionIndex(index)}\n              >\n                {option.actionText}\n              </Cell>\n            );\n          }\n\n          return (\n            <Fragment key={`${typeof option.value}-${option.label}`}>\n              {renderOption({\n                className: styles.option,\n                hovered: focusedOption\n                  ? option.value === focusedOption.value\n                  : false,\n                children: option.label,\n                selected:\n                  value.findIndex(\n                    (selectedOption) => selectedOption.value === option.value\n                  ) !== -1,\n                ref: (node: HTMLElement) => setOptionNode(index, node),\n                onMouseDown: (event: MouseEvent<HTMLDivElement>) => {\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  closeDropdownAfterSelect && setOpened(false);\n                  addOption(option);\n                  clearInput();\n                },\n                onMouseEnter: () => setFocusedOptionIndex(index),\n              })}\n            </Fragment>\n          );\n        })}\n      </Popper>\n    );\n  }\n);\n"],"names":["MultiselectDropdown","forwardRef","dropdownAriaId","options","onMouseLeave","targetRef","addOptionFromInput","setFocusedOptionIndex","renderOption","renderOptionDefault","focusedOption","value","setOptionNode","setOpened","closeDropdownAfterSelect","addOption","focusedOptionIndex","clearInput","portalContainer","ref","Popper","id","autoUpdateOnTargetResize","role","placement","sameWidth","className","ArrowIcon","withArrow","map","option","index","isEmptyOptionPreset","Cell","readOnly","placeholder","isCreateNewOptionPreset","hovered","onMouseDown","onMouseEnter","actionText","Fragment","children","label","selected","findIndex","selectedOption","node","event","defaultPrevented"],"mappings":";;;;+BA0DaA;;;eAAAA;;;;uBAnDN;sBAGyB;wBAET;2BAIhB;4BAE6B;AAwC7B,MAAMA,oCAAsBC,IAAAA,iBAAU,EAI3C,CACE,EACEC,cAAc,EACdC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,kBAAkB,EAClBC,qBAAqB,EACrBC,eAAeC,+BAAmB,EAClCC,aAAa,EACbC,KAAK,EACLC,aAAa,EACbC,SAAS,EACTC,wBAAwB,EACxBC,SAAS,EACTC,kBAAkB,EAClBC,UAAU,EACVC,eAAe,EAChB,EACDC;IAEA,qBACE,qBAACC,cAAM;QACLC,IAAInB;QACJiB,KAAKA;QACLd,WAAWA;QACXD,cAAcA;QACdkB,wBAAwB;QACxBC,MAAK;QACLC,WAAU;QACVC,SAAS;QACTC,SAAS;QACTR,iBAAiBA;QACjBS,WAAW;QACXC,WAAW;kBAEVzB,QAAQ0B,GAAG,CAAC,CAACC,QAAQC;YACpB,IAAIC,IAAAA,8BAAmB,EAACF,SAAS;gBAC/B,qBACE,qBAACG,UAAI;oBAAaC,QAAQ;oBAACR,SAAS;8BACjCI,OAAOK,WAAW;mBADX;YAId;YAEA,IAAIC,IAAAA,kCAAuB,EAACN,SAAS;gBACnC,qBACE,qBAACG,UAAI;oBAEHI,SAASrB,uBAAuBe;oBAChCO,aAAahC;oBACbiC,cAAc,IAAMhC,sBAAsBwB;8BAEzCD,OAAOU,UAAU;mBALd;YAQV;YAEA,qBACE,qBAACC,eAAQ;0BACNjC,aAAa;oBACZkB,SAAS;oBACTW,SAAS3B,gBACLoB,OAAOnB,KAAK,KAAKD,cAAcC,KAAK,GACpC;oBACJ+B,UAAUZ,OAAOa,KAAK;oBACtBC,UACEjC,MAAMkC,SAAS,CACb,CAACC,iBAAmBA,eAAenC,KAAK,KAAKmB,OAAOnB,KAAK,MACrD,CAAC;oBACTQ,KAAK,CAAC4B,OAAsBnC,cAAcmB,OAAOgB;oBACjDT,aAAa,CAACU;wBACZ,IAAIA,MAAMC,gBAAgB,EAAE;4BAC1B;wBACF;wBAEAnC,4BAA4BD,UAAU;wBACtCE,UAAUe;wBACVb;oBACF;oBACAsB,cAAc,IAAMhC,sBAAsBwB;gBAC5C;eAtBa,CAAC,EAAE,OAAOD,OAAOnB,KAAK,CAAC,CAAC,EAAEmB,OAAOa,KAAK,CAAC,CAAC;QAyB3D;;AAGN"}