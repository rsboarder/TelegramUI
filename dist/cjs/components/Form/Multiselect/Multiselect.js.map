{"version":3,"sources":["../../../../../src/components/Form/Multiselect/Multiselect.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  FocusEvent,\n  forwardRef,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  MouseEvent,\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from \"react\";\nimport styles from \"./Multiselect.module.css\";\n\nimport { Keys } from \"helpers/accessibility\";\nimport { classNames } from \"helpers/classNames\";\nimport { callMultiple } from \"helpers/function\";\nimport { multipleRef } from \"helpers/react/refs\";\nimport { useGlobalClicks } from \"hooks/useGlobalClicks\";\n\nimport { Icon20ChevronDown } from \"icons/20/chevron_down\";\n\nimport {\n  FormInput,\n  FormPublicProps,\n} from \"components/Form/FormInput/FormInput\";\nimport {\n  MultiselectBase,\n  MultiselectBaseProps,\n} from \"./components/MultiselectBase/MultiselectBase\";\nimport {\n  MultiselectDropdown,\n  MultiselectDropdownProps,\n} from \"./components/MultiselectDropdown/MultiselectDropdown\";\nimport {\n  FOCUS_ACTION_NEXT,\n  FOCUS_ACTION_PREV,\n  FocusActionType,\n  isServicePreset,\n} from \"./hooks/constants\";\nimport { useMultiselect, UseMultiselectProps } from \"./hooks/useMultiselect\";\nimport { MultiselectOption } from \"./types\";\n\nexport interface MultiselectProps\n  extends Omit<\n      InputHTMLAttributes<HTMLInputElement>,\n      \"value\" | \"defaultValue\" | \"onChange\"\n    >,\n    Omit<FormPublicProps, \"after\">,\n    Pick<MultiselectDropdownProps, \"closeDropdownAfterSelect\" | \"renderOption\">,\n    Pick<\n      UseMultiselectProps,\n      | \"value\"\n      | \"defaultValue\"\n      | \"onChange\"\n      | \"filterFn\"\n      | \"onInputChange\"\n      | \"inputValue\"\n      | \"selectedBehavior\"\n      | \"emptyText\"\n      | \"creatable\"\n    >,\n    Pick<MultiselectBaseProps, \"renderChip\"> {\n  /**\n   * The `options` property defines the available options within the multiselect dropdown.\n   * Each option is represented as an object conforming to the `MultiselectOption` structure,\n   * which typically includes properties like `value` (the option's value) and `label` (the human-readable text associated with the option).\n   */\n  options: MultiselectOption[];\n  /**\n   * Optional custom container to render the dropdown into, overrides the default from context.\n   * When provided, the dropdown will be rendered into this container instead of the default portal container.\n   */\n  portalContainer?: HTMLElement | null;\n}\n\n/**\n * A comprehensive component for rendering a multiselect input field with customizable options, dropdown behaviors, and chip display.\n * It integrates functionality for selecting multiple options, searching, and even creating new options based on user input.\n */\nexport const Multiselect = forwardRef<HTMLDivElement, MultiselectProps>(\n  (\n    {\n      // FormInput options\n      header,\n      before,\n      status,\n      className,\n      children,\n      disabled,\n\n      // CustomSelectDropdownProps\n      options: optionsProp,\n      closeDropdownAfterSelect = false,\n      selectedBehavior,\n      emptyText,\n      creatable = false,\n      filterFn,\n\n      // MultiselectInputProps\n      value: valueProp = [],\n      defaultValue,\n      inputValue: inputValueProp,\n      renderChip,\n      renderOption,\n      onInputChange: onInputChangeProp,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n\n      // Portal container\n      portalContainer,\n\n      ...restProps\n    },\n    ref\n  ) => {\n    const {\n      // Option props\n      value,\n      addOptionFromInput,\n      addOption,\n      removeOption,\n\n      // Input props\n      inputRef,\n      inputValue,\n      clearInput,\n      onInputChange,\n\n      // Dropdown props\n      options,\n      opened,\n      setOpened,\n      focusedOption,\n      focusedOptionIndex,\n      setFocusedOption,\n      setFocusedOptionIndex,\n    } = useMultiselect({\n      // Option props\n      value: valueProp,\n      defaultValue,\n      onChange,\n\n      // Input props\n      inputValue: inputValueProp,\n      onInputChange: onInputChangeProp,\n\n      // Dropdown props\n      options: optionsProp,\n      emptyText,\n      creatable,\n      filterFn,\n      selectedBehavior,\n\n      // Other props\n      disabled,\n    });\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const rootRef = useRef(null);\n    const chevronRef = useRef<SVGSVGElement>(null);\n    const wasChevronClickedRef = useRef(false);\n\n    const dropdownAriaId = useId();\n    const dropdownScrollBoxRef = useRef<HTMLDivElement>(null);\n\n    // State to control whether focus should open the dropdown\n    const [shouldOpenOnFocus, setShouldOpenOnFocus] = useState(true);\n\n    // Track if we're in the process of toggling via the chevron\n    const isTogglingRef = useRef(false);\n\n    // Track if the last mousedown was on a chip\n    const wasChipClickedRef = useRef(false);\n\n    const handleFocus = () => {\n      // If we're in the process of toggling via the chevron, don't change the dropdown state\n      if (isTogglingRef.current) {\n        return;\n      }\n\n      // If the last mousedown was on a chip, don't open the dropdown\n      if (wasChipClickedRef.current) {\n        wasChipClickedRef.current = false;\n        return;\n      }\n\n      // Open the dropdown if we should open on focus\n      if (shouldOpenOnFocus) {\n        setOpened(true);\n        setFocusedOptionIndex(null);\n      }\n\n      // Reset the flag for next focus\n      setShouldOpenOnFocus(true);\n    };\n\n    const handleBlur = (event: FocusEvent<HTMLInputElement>) => {\n      // If we're in the process of toggling via the chevron, don't do anything\n      if (isTogglingRef.current) {\n        return;\n      }\n\n      if (!event.defaultPrevented && !creatable) {\n        event.preventDefault();\n      }\n    };\n\n    const optionsNodes = useRef<HTMLElement[]>([]).current;\n    const scrollToElement = (index: number, center = false) => {\n      const dropdown = dropdownScrollBoxRef.current;\n      const item = optionsNodes[index];\n\n      if (!item || !dropdown) {\n        return;\n      }\n\n      const dropdownHeight = dropdown.offsetHeight;\n      const { scrollTop } = dropdown;\n      const itemTop = item.offsetTop;\n      const itemHeight = item.offsetHeight;\n\n      if (center) {\n        dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n      } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n        dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n      } else if (itemTop < scrollTop) {\n        dropdown.scrollTop = itemTop;\n      }\n    };\n\n    const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n      let focusedIndex = index;\n      const { length } = options;\n\n      if (index < 0) {\n        focusedIndex = length - 1;\n      } else if (index >= length) {\n        focusedIndex = 0;\n      }\n\n      if (focusedIndex === oldIndex) {\n        return;\n      }\n\n      scrollToElement(focusedIndex);\n      setFocusedOptionIndex(focusedIndex);\n    };\n\n    const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n      let index = nextIndex === null ? -1 : nextIndex;\n\n      if (type === FOCUS_ACTION_NEXT) {\n        index += 1;\n      }\n\n      if (type === FOCUS_ACTION_PREV) {\n        index -= 1;\n      }\n\n      focusOptionByIndex(index, focusedOptionIndex);\n    };\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      switch (event.key) {\n        case Keys.ARROW_UP:\n        case Keys.ARROW_DOWN:\n          event.preventDefault();\n\n          if (opened) {\n            focusOption(\n              focusedOptionIndex,\n              event.key === Keys.ARROW_UP\n                ? FOCUS_ACTION_PREV\n                : FOCUS_ACTION_NEXT\n            );\n            return;\n          }\n\n          setOpened(true);\n          setFocusedOptionIndex(0);\n          break;\n\n        case Keys.ENTER: {\n          if (!opened) {\n            break;\n          }\n\n          if (!creatable) {\n            event.preventDefault();\n          }\n\n          if (focusedOptionIndex === null) {\n            break;\n          }\n\n          const foundOption = options[focusedOptionIndex];\n          if (!foundOption || isServicePreset(foundOption)) {\n            break;\n          }\n\n          event.preventDefault();\n          addOption(foundOption);\n          setFocusedOptionIndex(null);\n          clearInput();\n\n          closeDropdownAfterSelect && setOpened(false);\n          break;\n        }\n\n        case Keys.ESCAPE:\n        case Keys.TAB:\n          opened && setOpened(false);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    useEffect(() => {\n      if (focusedOptionIndex === null) {\n        setFocusedOption(null);\n        return;\n      }\n\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n      if (\n        foundFocusedOptionIndex &&\n        !isServicePreset(foundFocusedOptionIndex)\n      ) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }, [options, focusedOptionIndex, setFocusedOption]);\n\n    const onDropdownMouseLeave = useCallback(() => {\n      setFocusedOptionIndex(null);\n    }, [setFocusedOptionIndex]);\n\n    // Handle chevron mousedown to prevent focus issues\n    // Using mousedown instead of click ensures this runs before blur/focus events\n    const handleChevronMouseDown = (e: MouseEvent<SVGSVGElement>) => {\n      // Prevent the default behavior which would cause focus/blur events\n      e.preventDefault();\n      // Stop propagation to prevent other handlers from firing\n      e.stopPropagation();\n\n      // Set the toggling flag to prevent focus/blur handlers from interfering\n      isTogglingRef.current = true;\n      // Set the chevron clicked flag to prevent handleClickOutside from closing the dropdown\n      wasChevronClickedRef.current = true;\n\n      // Toggle the dropdown state\n      if (opened) {\n        setShouldOpenOnFocus(false);\n        setOpened(false);\n      } else {\n        setOpened(true);\n      }\n\n      // Focus the input and reset the toggling flag after a delay\n      setTimeout(() => {\n        if (!opened) {\n          inputRef.current?.focus();\n        }\n\n        // Reset the toggling flag\n        isTogglingRef.current = false;\n\n        // Reset the chevron clicked flag after a delay\n        setTimeout(() => {\n          wasChevronClickedRef.current = false;\n        }, 100);\n      }, 100);\n    };\n\n    // Handle base click to toggle dropdown when no chips are selected\n    const handleBaseClick = (e: MouseEvent<HTMLDivElement>) => {\n      // Check if the click originated from the chevron or if we're in the toggling process\n      if (wasChevronClickedRef.current || disabled) {\n        return;\n      }\n\n      // Check if the click was on a chip\n      const target = e.target as HTMLElement;\n      const isChipClick = target.closest('[role=\"option\"]') !== null;\n\n      // If it's a chip click, stop propagation\n      if (isChipClick) {\n        e.stopPropagation();\n        e.preventDefault();\n        return;\n      }\n\n      if (opened) {\n        setShouldOpenOnFocus(false);\n        setOpened(false);\n      } else {\n        setOpened(true);\n        inputRef.current?.focus();\n      }\n    };\n\n    // Handle base mousedown to prevent immediate closing on first click\n    const handleBaseMouseDown = (e: MouseEvent<HTMLDivElement>) => {\n      // Check if the click was on a chip\n      const target = e.target as HTMLElement;\n      const isChipClick = target.closest('[role=\"option\"]') !== null;\n\n      // If it's a chip click, prevent default behavior\n      if (isChipClick) {\n        e.preventDefault();\n        e.stopPropagation();\n        wasChipClickedRef.current = true;\n        return;\n      }\n\n      // Only handle if not disabled\n      if (!disabled) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n\n    const handleClickOutside = useCallback(() => {\n      // Don't close the dropdown if the chevron was clicked\n      if (wasChevronClickedRef.current) {\n        return;\n      }\n\n      // Don't reopen on next focus\n      setShouldOpenOnFocus(false);\n      setOpened(false);\n    }, [setOpened]);\n\n    useGlobalClicks(\n      handleClickOutside,\n      opened ? rootRef : null,\n      opened ? dropdownScrollBoxRef : null\n    );\n\n    const controlledStatus = status || (opened ? \"focused\" : \"default\");\n\n    return (\n      <FormInput\n        ref={multipleRef(ref, containerRef)}\n        header={header}\n        before={before}\n        status={controlledStatus}\n        disabled={disabled}\n        className={classNames(styles.wrapper, className)}\n      >\n        <MultiselectBase\n          {...restProps}\n          // FormFieldProps\n          ref={rootRef}\n          className={styles.base}\n          // Option props\n          onAddChipOption={addOptionFromInput}\n          onRemoveChipOption={removeOption}\n          renderChip={renderChip}\n          chipsValue={value}\n          // Input props\n          value={inputValue}\n          inputRef={inputRef}\n          onChange={onInputChange}\n          onFocus={callMultiple(handleFocus, onFocus)}\n          onBlur={callMultiple(handleBlur, onBlur)}\n          onKeyDown={callMultiple(handleKeyDown, onKeyDown)}\n          // a11y props\n          role=\"combobox\"\n          aria-expanded={opened}\n          aria-controls={dropdownAriaId}\n          aria-haspopup=\"listbox\"\n          // Add click handler for the base component\n          onClick={handleBaseClick}\n          // Add onMouseDown handler to prevent immediate closing\n          onMouseDown={handleBaseMouseDown}\n        />\n        <Icon20ChevronDown\n          ref={chevronRef}\n          aria-hidden\n          onMouseDown={handleChevronMouseDown}\n          className={styles.chevron}\n        />\n        {opened && (\n          <MultiselectDropdown\n            ref={dropdownScrollBoxRef}\n            dropdownAriaId={dropdownAriaId}\n            options={options}\n            onMouseLeave={onDropdownMouseLeave}\n            targetRef={rootRef}\n            addOptionFromInput={() => addOptionFromInput(inputValue)}\n            setFocusedOptionIndex={setFocusedOptionIndex}\n            renderOption={renderOption}\n            focusedOption={focusedOption}\n            value={value}\n            setOptionNode={(index, node) => {\n              optionsNodes[index] = node;\n            }}\n            setOpened={setOpened}\n            closeDropdownAfterSelect={closeDropdownAfterSelect}\n            addOption={addOption}\n            clearInput={clearInput}\n            focusedOptionIndex={focusedOptionIndex}\n            portalContainer={portalContainer}\n          />\n        )}\n      </FormInput>\n    );\n  }\n);\n"],"names":["Multiselect","forwardRef","ref","header","before","status","className","children","disabled","options","optionsProp","closeDropdownAfterSelect","selectedBehavior","emptyText","creatable","filterFn","value","valueProp","defaultValue","inputValue","inputValueProp","renderChip","renderOption","onInputChange","onInputChangeProp","onChange","onFocus","onBlur","onKeyDown","portalContainer","restProps","addOptionFromInput","addOption","removeOption","inputRef","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","useMultiselect","containerRef","useRef","rootRef","chevronRef","wasChevronClickedRef","dropdownAriaId","useId","dropdownScrollBoxRef","shouldOpenOnFocus","setShouldOpenOnFocus","useState","isTogglingRef","wasChipClickedRef","handleFocus","current","handleBlur","event","defaultPrevented","preventDefault","optionsNodes","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","focusedIndex","length","focusOption","nextIndex","type","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","handleKeyDown","key","Keys","ARROW_UP","ARROW_DOWN","ENTER","foundOption","isServicePreset","ESCAPE","TAB","useEffect","foundFocusedOptionIndex","onDropdownMouseLeave","useCallback","handleChevronMouseDown","e","stopPropagation","setTimeout","focus","handleBaseClick","target","isChipClick","closest","handleBaseMouseDown","handleClickOutside","useGlobalClicks","controlledStatus","FormInput","multipleRef","classNames","MultiselectBase","onAddChipOption","onRemoveChipOption","chipsValue","callMultiple","role","aria-expanded","aria-controls","aria-haspopup","onClick","onMouseDown","Icon20ChevronDown","aria-hidden","MultiselectDropdown","onMouseLeave","targetRef","setOptionNode","node"],"mappings":"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"}