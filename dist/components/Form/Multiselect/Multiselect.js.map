{"version":3,"sources":["../../../../src/components/Form/Multiselect/Multiselect.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  FocusEvent,\n  forwardRef,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n} from \"react\";\nimport styles from \"./Multiselect.module.css\";\n\nimport { Keys } from \"helpers/accessibility\";\nimport { classNames } from \"helpers/classNames\";\nimport { callMultiple } from \"helpers/function\";\nimport { multipleRef } from \"helpers/react/refs\";\nimport { useGlobalClicks } from \"hooks/useGlobalClicks\";\n\nimport { Icon20ChevronDown } from \"icons/20/chevron_down\";\n\nimport {\n  FormInput,\n  FormPublicProps,\n} from \"components/Form/FormInput/FormInput\";\nimport {\n  MultiselectBase,\n  MultiselectBaseProps,\n} from \"./components/MultiselectBase/MultiselectBase\";\nimport {\n  MultiselectDropdown,\n  MultiselectDropdownProps,\n} from \"./components/MultiselectDropdown/MultiselectDropdown\";\nimport {\n  FOCUS_ACTION_NEXT,\n  FOCUS_ACTION_PREV,\n  FocusActionType,\n  isServicePreset,\n} from \"./hooks/constants\";\nimport { useMultiselect, UseMultiselectProps } from \"./hooks/useMultiselect\";\nimport { MultiselectOption } from \"./types\";\n\nexport interface MultiselectProps\n  extends Omit<\n      InputHTMLAttributes<HTMLInputElement>,\n      \"value\" | \"defaultValue\" | \"onChange\"\n    >,\n    Omit<FormPublicProps, \"after\">,\n    Pick<MultiselectDropdownProps, \"closeDropdownAfterSelect\" | \"renderOption\">,\n    Pick<\n      UseMultiselectProps,\n      | \"value\"\n      | \"defaultValue\"\n      | \"onChange\"\n      | \"filterFn\"\n      | \"onInputChange\"\n      | \"inputValue\"\n      | \"selectedBehavior\"\n      | \"emptyText\"\n      | \"creatable\"\n    >,\n    Pick<MultiselectBaseProps, \"renderChip\"> {\n  /**\n   * The `options` property defines the available options within the multiselect dropdown.\n   * Each option is represented as an object conforming to the `MultiselectOption` structure,\n   * which typically includes properties like `value` (the option's value) and `label` (the human-readable text associated with the option).\n   */\n  options: MultiselectOption[];\n  /**\n   * Optional custom container to render the dropdown into, overrides the default from context.\n   * When provided, the dropdown will be rendered into this container instead of the default portal container.\n   */\n  portalContainer?: HTMLElement | null;\n}\n\n/**\n * A comprehensive component for rendering a multiselect input field with customizable options, dropdown behaviors, and chip display.\n * It integrates functionality for selecting multiple options, searching, and even creating new options based on user input.\n */\nexport const Multiselect = forwardRef<HTMLDivElement, MultiselectProps>(\n  (\n    {\n      // FormInput options\n      header,\n      before,\n      status,\n      className,\n      children,\n      disabled,\n\n      // CustomSelectDropdownProps\n      options: optionsProp,\n      closeDropdownAfterSelect = false,\n      selectedBehavior,\n      emptyText,\n      creatable = false,\n      filterFn,\n\n      // MultiselectInputProps\n      value: valueProp = [],\n      defaultValue,\n      inputValue: inputValueProp,\n      renderChip,\n      renderOption,\n      onInputChange: onInputChangeProp,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n\n      // Portal container\n      portalContainer,\n\n      ...restProps\n    },\n    ref\n  ) => {\n    const {\n      // Option props\n      value,\n      addOptionFromInput,\n      addOption,\n      removeOption,\n\n      // Input props\n      inputRef,\n      inputValue,\n      clearInput,\n      onInputChange,\n\n      // Dropdown props\n      options,\n      opened,\n      setOpened,\n      focusedOption,\n      focusedOptionIndex,\n      setFocusedOption,\n      setFocusedOptionIndex,\n    } = useMultiselect({\n      // Option props\n      value: valueProp,\n      defaultValue,\n      onChange,\n\n      // Input props\n      inputValue: inputValueProp,\n      onInputChange: onInputChangeProp,\n\n      // Dropdown props\n      options: optionsProp,\n      emptyText,\n      creatable,\n      filterFn,\n      selectedBehavior,\n\n      // Other props\n      disabled,\n    });\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const rootRef = useRef(null);\n\n    const dropdownAriaId = useId();\n    const dropdownScrollBoxRef = useRef<HTMLDivElement>(null);\n\n    const handleFocus = () => {\n      setOpened(true);\n      setFocusedOptionIndex(null);\n    };\n\n    const handleBlur = (event: FocusEvent<HTMLInputElement>) => {\n      if (!event.defaultPrevented && !creatable) {\n        event.preventDefault();\n      }\n    };\n\n    const optionsNodes = useRef<HTMLElement[]>([]).current;\n    const scrollToElement = (index: number, center = false) => {\n      const dropdown = dropdownScrollBoxRef.current;\n      const item = optionsNodes[index];\n\n      if (!item || !dropdown) {\n        return;\n      }\n\n      const dropdownHeight = dropdown.offsetHeight;\n      const { scrollTop } = dropdown;\n      const itemTop = item.offsetTop;\n      const itemHeight = item.offsetHeight;\n\n      if (center) {\n        dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n      } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n        dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n      } else if (itemTop < scrollTop) {\n        dropdown.scrollTop = itemTop;\n      }\n    };\n\n    const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n      let focusedIndex = index;\n      const { length } = options;\n\n      if (index < 0) {\n        focusedIndex = length - 1;\n      } else if (index >= length) {\n        focusedIndex = 0;\n      }\n\n      if (focusedIndex === oldIndex) {\n        return;\n      }\n\n      scrollToElement(focusedIndex);\n      setFocusedOptionIndex(focusedIndex);\n    };\n\n    const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n      let index = nextIndex === null ? -1 : nextIndex;\n\n      if (type === FOCUS_ACTION_NEXT) {\n        index += 1;\n      }\n\n      if (type === FOCUS_ACTION_PREV) {\n        index -= 1;\n      }\n\n      focusOptionByIndex(index, focusedOptionIndex);\n    };\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      switch (event.key) {\n        case Keys.ARROW_UP:\n        case Keys.ARROW_DOWN:\n          event.preventDefault();\n\n          if (opened) {\n            focusOption(\n              focusedOptionIndex,\n              event.key === Keys.ARROW_UP\n                ? FOCUS_ACTION_PREV\n                : FOCUS_ACTION_NEXT\n            );\n            return;\n          }\n\n          setOpened(true);\n          setFocusedOptionIndex(0);\n          break;\n\n        case Keys.ENTER: {\n          if (!opened) {\n            break;\n          }\n\n          if (!creatable) {\n            event.preventDefault();\n          }\n\n          if (focusedOptionIndex === null) {\n            break;\n          }\n\n          const foundOption = options[focusedOptionIndex];\n          if (!foundOption || isServicePreset(foundOption)) {\n            break;\n          }\n\n          event.preventDefault();\n          addOption(foundOption);\n          setFocusedOptionIndex(null);\n          clearInput();\n\n          closeDropdownAfterSelect && setOpened(false);\n          break;\n        }\n\n        case Keys.ESCAPE:\n        case Keys.TAB:\n          opened && setOpened(false);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    useEffect(() => {\n      if (focusedOptionIndex === null) {\n        setFocusedOption(null);\n        return;\n      }\n\n      const foundFocusedOptionIndex = options[focusedOptionIndex];\n      if (\n        foundFocusedOptionIndex &&\n        !isServicePreset(foundFocusedOptionIndex)\n      ) {\n        setFocusedOption(foundFocusedOptionIndex);\n      }\n    }, [options, focusedOptionIndex, setFocusedOption]);\n\n    const onDropdownMouseLeave = useCallback(() => {\n      setFocusedOptionIndex(null);\n    }, [setFocusedOptionIndex]);\n\n    const toggleOpened = () => {\n      setOpened((prevOpened) => !prevOpened);\n    };\n\n    const handleClickOutside = useCallback(() => {\n      setOpened(false);\n    }, [setOpened]);\n\n    const setOptionNode = (index: number, node: HTMLElement) => {\n      optionsNodes[index] = node;\n    };\n\n    useGlobalClicks(\n      handleClickOutside,\n      opened ? rootRef : null,\n      opened ? dropdownScrollBoxRef : null\n    );\n\n    const controlledStatus = status || (opened ? \"focused\" : \"default\");\n    return (\n      <FormInput\n        ref={multipleRef(ref, containerRef)}\n        header={header}\n        before={before}\n        status={controlledStatus}\n        disabled={disabled}\n        className={classNames(styles.wrapper, className)}\n      >\n        <MultiselectBase\n          {...restProps}\n          // FormFieldProps\n          ref={rootRef}\n          className={styles.base}\n          // Option props\n          onAddChipOption={addOptionFromInput}\n          onRemoveChipOption={removeOption}\n          renderChip={renderChip}\n          chipsValue={value}\n          // Input props\n          value={inputValue}\n          inputRef={inputRef}\n          onChange={onInputChange}\n          onFocus={callMultiple(handleFocus, onFocus)}\n          onBlur={callMultiple(handleBlur, onBlur)}\n          onKeyDown={callMultiple(handleKeyDown, onKeyDown)}\n          // a11y props\n          role=\"combobox\"\n          aria-expanded={opened}\n          aria-controls={dropdownAriaId}\n          aria-haspopup=\"listbox\"\n        />\n        <Icon20ChevronDown\n          aria-hidden\n          onClick={toggleOpened}\n          className={styles.chevron}\n        />\n        {opened && (\n          <MultiselectDropdown\n            ref={dropdownScrollBoxRef}\n            dropdownAriaId={dropdownAriaId}\n            options={options}\n            onMouseLeave={onDropdownMouseLeave}\n            targetRef={rootRef}\n            addOptionFromInput={() => addOptionFromInput(inputValue)}\n            setFocusedOptionIndex={setFocusedOptionIndex}\n            renderOption={renderOption}\n            focusedOption={focusedOption}\n            value={value}\n            setOptionNode={setOptionNode}\n            setOpened={setOpened}\n            closeDropdownAfterSelect={closeDropdownAfterSelect}\n            addOption={addOption}\n            clearInput={clearInput}\n            focusedOptionIndex={focusedOptionIndex}\n            portalContainer={portalContainer}\n          />\n        )}\n      </FormInput>\n    );\n  }\n);\n"],"names":["forwardRef","useCallback","useEffect","useId","useRef","Keys","classNames","callMultiple","multipleRef","useGlobalClicks","Icon20ChevronDown","FormInput","MultiselectBase","MultiselectDropdown","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","isServicePreset","useMultiselect","Multiselect","ref","header","before","status","className","children","disabled","options","optionsProp","closeDropdownAfterSelect","selectedBehavior","emptyText","creatable","filterFn","value","valueProp","defaultValue","inputValue","inputValueProp","renderChip","renderOption","onInputChange","onInputChangeProp","onChange","onFocus","onBlur","onKeyDown","portalContainer","restProps","addOptionFromInput","addOption","removeOption","inputRef","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","containerRef","rootRef","dropdownAriaId","dropdownScrollBoxRef","handleFocus","handleBlur","event","defaultPrevented","preventDefault","optionsNodes","current","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","focusedIndex","length","focusOption","nextIndex","type","handleKeyDown","key","ARROW_UP","ARROW_DOWN","ENTER","foundOption","ESCAPE","TAB","foundFocusedOptionIndex","onDropdownMouseLeave","toggleOpened","prevOpened","handleClickOutside","setOptionNode","node","controlledStatus","onAddChipOption","onRemoveChipOption","chipsValue","role","aria-expanded","aria-controls","aria-haspopup","aria-hidden","onClick","onMouseLeave","targetRef"],"mappings":"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"}